В качестве задания, необходимо разработать ПО для мониторинга ресурсов ОС.

Общие требования:
- проектирование архитектуры
- документация
- разработанное ПО

Функциональные требования:
- поддержка Public API (для интеграции со сторонними веб-клиентами)
- документирование Public API для работы сторонних разработчиков
- простой веб-интерфейс для отображения информации о процессах
- оповещение веб-клиентов о критическом использовании ресурсов (CPU, Memory)

Нефункциональные требования:
- работа с 10+ клиентами
- скорость ответа < 100msec
...


Описание архитектуры
В качестве основного стека технологий, были выбраны следующие:
- back-end: C# .net core 2.2+
- front-end: React 16.4+
- protocols: WebSocket (app layer), HTTP(app layer), TCP (transport)
- documentation: Swagger

Как основной механиз обмена данными между клиентом и сервером, был выбран протокол передачи WebSocket. 
Помимо эффективного метода доставки данных клиенту, он позволяет снизить кол-во обращений клиента к серверу, 
а также обеспечить контроль соединения, как на стороне клиента, так и на стороне сервера.
На серверной стороне, решение реализовано по принципу построения WebAPI сервиса, с возможностью подключения
любого типа клиента. В качестве дальнейшего развития продукта, можно обеспечить версионирование, авторизацию и документирование.
Клиентское приложение, реализовано на базе принципа SPA и позволяет довольно просто настроить соединение и отображение информации.
В качестве документации, был использован пакет Swagger, который позволяет не только автоматически генерировать документацию,  
но и позволяет легко получать доступ к методам и моделям API другим разработчикам.

Установка и запуск ПО
- для установки front-end решения, необходимо:
	+ установить npm
	+ разархивировать client
	+ перейти в папку client 
	+ запустить в командной строке npm install
	+ запустить в командной строке npm run start
	+ приложение будет можно увидеть, перейдя в браузере по ссылке http://localhost:3000
- для установки back-end решения, необходимо:
	+ установить .net core sdk 2.2.+
	+ разархивировать server
	+ перейти в папку server/Monitor.Server 
	+ запустить в командной строке dotnet run Monitor.Server.csproj
	+ статус работы сервиса можно получить перейдя в браузере по ссылке http://localhost:5000/ping

Работа с документацией
После запуска с back-end решения, разработчики могут получить доступ к документации API, перейдя в браузере по
адресу http://localhost:5000/api/swagger/index.html. На текущйи момент, можно обратить внимание, на то что для работы
с API есть два метода:
	+ GET: /api/monitors/run
	+ POST: /api/Monitors/stop
Метод "run", возвращает модель "MonitorState", структура которой описана ниже.

Работа с приложением
Таким образом, после запуска серверной и клиентской части приложения, можно перейти в браузере по адресу http://localhost:3000.
Нажав кнопку "Connect", клиентское приложение установит socket-соединение с сервером, после чего на сервере будет запущен процесс получения состояния
ресурсов ПК и передачи на клиент информации используя модель "MonitorState".
Для прекращения связи, используется механизм разрыва соединения на клиентской стороне, но также может быть использован метод API "stop".

PS> механизм нотификации о достижении пределов использования ресурсов не был реализован, 
но в модель "MonitorState" была заложена необходимая для этого информация.




